<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Vant</title>
    <link href="/2020/08/07/Vant-ui/"/>
    <url>/2020/08/07/Vant-ui/</url>
    
    <content type="html"><![CDATA[<p><a href="https://youzan.github.io/vant/#/zh-CN/">官网传送门</a></p><p>Vant：轻量、可靠的移动端 Vue 组件库 </p><a id="more"></a><h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><ul><li><p>vant ：<code>npm i vant -S </code></p></li><li><p>导入组件（导入所有组件的方式）</p><pre><code class="hljs js"><span class="hljs-keyword">import</span> Vant <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vant&#x27;</span><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;vant/lib/index.css&#x27;</span><span class="hljs-comment">// 使用 vant</span>Vue.use(Vant)</code></pre></li></ul><h2 id="1-按钮-van-button"><a href="#1-按钮-van-button" class="headerlink" title="1.按钮 van-button"></a>1.按钮 van-button</h2><p>按钮支持 <code>default</code>、<code>primary</code>、<code>info</code>、<code>warning</code>、<code>danger</code> 五种类型，</p><p>默认为 <code>default</code>。</p><p>[其他属性][<a href="https://youzan.github.io/vant/#/zh-CN/button]">https://youzan.github.io/vant/#/zh-CN/button]</a></p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">van-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>主要按钮<span class="hljs-tag">&lt;/<span class="hljs-name">van-button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">van-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span>信息按钮<span class="hljs-tag">&lt;/<span class="hljs-name">van-button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">van-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;default&quot;</span>&gt;</span>默认按钮<span class="hljs-tag">&lt;/<span class="hljs-name">van-button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">van-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;warning&quot;</span>&gt;</span>警告按钮<span class="hljs-tag">&lt;/<span class="hljs-name">van-button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">van-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;danger&quot;</span>&gt;</span>危险按钮<span class="hljs-tag">&lt;/<span class="hljs-name">van-button</span>&gt;</span></code></pre><h2 id="2-单元格-van-cell"><a href="#2-单元格-van-cell" class="headerlink" title="2.单元格 van-cell"></a>2.单元格 van-cell</h2><blockquote><p>如果需要在 cell（单元格之内添加其它的图标），必须使用插槽</p></blockquote><ul><li><code>Cell</code> 可以单独使用，</li><li>也可以与 <code>CellGroup</code> 搭配使用，<ul><li><code>CellGroup</code> 可以为 <code>Cell</code> 提供上下外边框。</li></ul></li></ul><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">van-cell-group</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">van-cell</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;单元格&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;内容&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">title</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>        插槽测试1      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">default</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>        插槽测试2      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">van-cell-group</span>&gt;</span></code></pre><ul><li>注意点：插槽是必须要别人提供的才能用的哦</li></ul><h2 id="3-导航栏-van-nav-bar"><a href="#3-导航栏-van-nav-bar" class="headerlink" title="3.导航栏 van-nav-bar"></a>3.导航栏 van-nav-bar</h2><ul><li><p>属性</p><ul><li>title:中间标题  </li><li>left-text:左边文本内容    </li><li>right-text:右边文本内容</li></ul></li><li><p>方法</p><ul><li>@click-left:左边点击事件</li><li>@click-right:右边点击事件</li></ul></li><li><p>插槽</p><ul><li><p>left:左边,包括左边的图标</p></li><li><p>title:中间标题</p></li><li><p>right:右边</p></li></ul></li></ul><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">van-nav-bar</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;标题&quot;</span> <span class="hljs-attr">right-text</span>=<span class="hljs-string">&quot;按钮&quot;</span>  @<span class="hljs-attr">click-left</span>=<span class="hljs-string">&quot;onClickLeft&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">left</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;iconfont&quot;</span>&gt;</span>      <span class="hljs-symbol">&amp;#xe637;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">van-nav-bar</span>&gt;</span>methods:&#123;    onClickLeft()&#123;window.console.log(&#x27;xxx&#x27;)&#125;&#125;</code></pre><h2 id="4-输入框-van-field"><a href="#4-输入框-van-field" class="headerlink" title="4.输入框 van-field"></a>4.输入框 van-field</h2><ul><li><p>属性</p><ul><li>v-model双向绑定</li><li>rules定义表单验证规则</li><li>label:标题  </li><li>name:(类似原生表单提交的name),可定义后用于表单验证与重置</li><li>type:手机键盘类型(text/tel/digit/number/password)      </li></ul></li><li><p>常用插槽</p><ul><li>left-icon:自定义输入框头部图标</li><li>button:自定义输入框尾部按钮</li></ul></li></ul><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">van-field</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;数字&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">left-icon</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;iconfont&quot;</span>&gt;</span>      <span class="hljs-symbol">&amp;#xe60b;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">van-field</span>&gt;</span>data () &#123;    return &#123;      number: &#x27;&#x27;    &#125;  &#125;,</code></pre><h2 id="5-表单-van-form"><a href="#5-表单-van-form" class="headerlink" title="5.表单 van-form"></a>5.表单 van-form</h2><ul><li><p>属性</p><ul><li>label-width：标题宽度</li><li>ref<ul><li>this.$refs.ref值.validata()：表单验证</li></ul></li></ul></li><li><p>方法</p><ul><li>全局验证<ul><li>this.$refs.ref值.validate().then(() =&gt; {}).catch(() =&gt; {})  </li></ul></li><li>局部验证<ul><li>this.$refs.ref值.validate( “子项name的值” ).then(() =&gt; {}).catch(() =&gt; {})  </li><li>就是在 validate 中 加入 子项中自定义的 name 属性值</li></ul></li><li>重置表单验证提示<ul><li>this.$refs.form.resetValidation(‘ 子项name的值 ‘)</li><li>不是重置表单哦，重置的是验证提示的文字 QAQ</li></ul></li></ul></li><li><p>子项</p><ul><li>v-model=“ form.xxx ”  绑定数据</li><li>:rules = “ rules.xxx ”   绑定验证规则</li><li>name=“xxx”  是局部验证需要的参数</li></ul></li></ul><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">van-form</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;form&quot;</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">van-field</span></span><span class="hljs-tag">    <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;用户名&quot;</span></span><span class="hljs-tag">    <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;form.usname&quot;</span></span><span class="hljs-tag">    <span class="hljs-attr">:rules</span>=<span class="hljs-string">&quot;rules.usname&quot;</span></span><span class="hljs-tag">    <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;usname&quot;</span></span><span class="hljs-tag">  &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">van-field</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">van-form</span>&gt;</span></code></pre><pre><code class="hljs javascript">data()&#123;    form: &#123;        usname: <span class="hljs-string">&#x27;&#x27;</span>      &#125;,     rules: &#123;        usname: [          &#123;<span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>,<span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;不能为空&#x27;</span>,<span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;onChange&#x27;</span>&#125;,          &#123;            validator: <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;              <span class="hljs-keyword">const</span> _reg = xxx              <span class="hljs-keyword">return</span> _reg.test(value)            &#125;,            message: <span class="hljs-string">&#x27;请输入正确的手机号&#x27;</span>,            trigger: <span class="hljs-string">&#x27;onChange&#x27;</span>          &#125;        ],    &#125;    &#125;</code></pre><h2 id="6-轻提示-van-toast"><a href="#6-轻提示-van-toast" class="headerlink" title="6.轻提示 van-toast"></a>6.轻提示 van-toast</h2><blockquote><p>提示用户时,最好有一些美观的提示效果,提升用户体验,这里可以使用toast组件来实现</p></blockquote><p><a href="https://vant-contrib.gitee.io/vant/#/zh-CN/toast">van - toast</a></p><ul><li>核心 <ul><li>this.$toast</li></ul></li><li>清理提示<ul><li>this.$toast.clear()</li></ul></li><li>常用参数<ul><li>type:   可选 loading，success，fail</li><li>duration:  时长,毫秒为单位，如果写0表示不消失,</li><li>overlay:  是否显示背景层</li><li>forbidClick :  是否禁止背景点击</li><li>message:  消息内容</li><li>loadingType：自定义图标，<a href="https://youzan.github.io/vant/#/zh-CN/loading">可选</a></li></ul></li></ul><pre><code class="hljs javascript"><span class="hljs-built_in">this</span>.$toast.success(<span class="hljs-string">&#x27;成功&#x27;</span>)<span class="hljs-built_in">this</span>.$toast.fail(<span class="hljs-string">&#x27;失败&#x27;</span>)<span class="hljs-built_in">this</span>.$toast.loading(<span class="hljs-string">&#x27;加载&#x27;</span>)his.$toast.loading(<span class="hljs-string">&#x27;加载&#x27;</span>)  <span class="hljs-built_in">this</span>.$toast.loading(&#123;    loadingType: <span class="hljs-string">&#x27;spinner&#x27;</span>,    duration: <span class="hljs-number">2000</span>,    message: <span class="hljs-string">&#x27;加载&#x27;</span>&#125;)</code></pre>]]></content>
    
    
    <categories>
      
      <category>Vue组件库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vant-ui</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面面移动端项目</title>
    <link href="/2020/08/07/Vue%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    <url>/2020/08/07/Vue%E7%A7%BB%E5%8A%A8%E7%AB%AF/</url>
    
    <content type="html"><![CDATA[<p>Vue2.0 + vant-ui 的移动端练手项目</p><a id="more"></a><h2 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1.创建项目"></a>1.创建项目</h2><h3 id="1-1-vue-create"><a href="#1-1-vue-create" class="headerlink" title="1.1 vue create"></a>1.1 vue create</h3><pre><code class="hljs cmd">vue create test</code></pre><h3 id="1-2-自定义配置"><a href="#1-2-自定义配置" class="headerlink" title="1.2 自定义配置"></a>1.2 自定义配置</h3><h4 id="1-2-1-选择插件"><a href="#1-2-1-选择插件" class="headerlink" title="1.2.1 选择插件"></a>1.2.1 选择插件</h4><pre><code class="hljs ada">&gt; Manually <span class="hljs-keyword">select</span> features</code></pre><ul><li>Babel    （ES6转ES5）</li><li>TypeScript</li><li>Progressive Web App(PWA) Support    （贴近原生App）</li><li>Router</li><li>Vuex</li><li>CSS Pre-processors    （使用Css预处理）</li><li>Linter / Formatter    （ esLint 语法规范 ）</li><li>Unit Testing    （一般是测试人员做的事情）</li><li>E2E Testing    （一般是测试人员做的事情）</li></ul><h4 id="1-2-2-选择路由模式"><a href="#1-2-2-选择路由模式" class="headerlink" title="1.2.2 选择路由模式"></a>1.2.2 选择路由模式</h4><pre><code class="hljs cmd">&gt; Use history <span class="hljs-built_in">mode</span> <span class="hljs-keyword">for</span> router?</code></pre><ul><li>选择路由模式<ul><li>Y    history模式（地址不带#号，需要做相关配置）</li><li>n    hash模式（地址带#号，不用配置）</li></ul></li></ul><h4 id="1-2-3-配置Css预处理"><a href="#1-2-3-配置Css预处理" class="headerlink" title="1.2.3 配置Css预处理"></a>1.2.3 配置Css预处理</h4><pre><code class="hljs markdown"><span class="hljs-quote">&gt; Pick a CSS pre-processor</span></code></pre><ul><li>选择 Css 预处理插件<ul><li>Less</li></ul></li></ul><h4 id="1-2-4-配置-eslint"><a href="#1-2-4-配置-eslint" class="headerlink" title="1.2.4 配置 eslint"></a>1.2.4 配置 eslint</h4><pre><code class="hljs applescript">&gt; ESLint <span class="hljs-keyword">with</span> <span class="hljs-keyword">error</span> prevention only</code></pre><ul><li>选择  esLint  语法检查模式<ul><li>ESLint + Standard config（标准模式）</li></ul></li></ul><pre><code class="hljs markdown"><span class="hljs-quote">&gt; Pick additional lint features:</span></code></pre><ul><li>在何处进行语法检查<ul><li>Lint on save（保存时）</li><li>Lint and fix on commit（提交时）</li></ul></li></ul><h4 id="1-2-5-集成配置文件"><a href="#1-2-5-集成配置文件" class="headerlink" title="1.2.5 集成配置文件"></a>1.2.5 集成配置文件</h4><pre><code class="hljs routeros">&gt; Where <span class="hljs-keyword">do</span> you prefer placing<span class="hljs-built_in"> config </span><span class="hljs-keyword">for</span> Babel, ESLint, etc.</code></pre><ul><li>你更喜欢把配置放在哪里<ul><li>In dedicated config files（每个配置一个文件）</li><li>In package.json （集成在  package.json 中）</li></ul></li></ul><h4 id="1-2-5-保存次配置选项"><a href="#1-2-5-保存次配置选项" class="headerlink" title="1.2.5 保存次配置选项"></a>1.2.5 保存次配置选项</h4><pre><code class="hljs kotlin">&gt; Save <span class="hljs-keyword">this</span> <span class="hljs-keyword">as</span> a preset <span class="hljs-keyword">for</span> future projects?</code></pre><ul><li>保存本次配置，下次可以延用<ul><li>y    <ul><li>Save preset as: 保存项名字</li><li>下次 vue create 可以看到这个名字</li></ul></li><li>n<ul><li>不保存</li></ul></li></ul></li></ul><h3 id="1-3-eslint-“-标准规范-”"><a href="#1-3-eslint-“-标准规范-”" class="headerlink" title="1.3 eslint “ 标准规范 ”"></a>1.3 eslint “ 标准规范 ”</h3><ul><li><p>作用：</p><ul><li><p>用来规范 js 的写法。它就是一个规范</p></li><li><p>Standard：标准规范（不是业内标准，只是插件的标准）</p></li><li><p><a href="https://github.com/standard/standard/blob/master/docs/README-zhcn.md">Standard规范 传送门</a></p></li></ul></li></ul><h4 id="1-3-1-具体规定"><a href="#1-3-1-具体规定" class="headerlink" title="1.3.1 具体规定"></a>1.3.1 具体规定</h4><ul><li>1.0 缩进使用两个空格</li><li>2.0 字符串使用单引号</li><li>3.0 句未不能以分号结尾</li><li>4.0 行首不要以 (, [ 开头</li><li>5.0 关键字后面必须加空格</li><li>6.0 函数名后面必须加空格</li><li>7.0 <strong>不要有冗余的变量</strong></li><li>8.0 <strong>使用 <code>===</code> 替换 <code>==</code></strong></li><li>9.0 <strong>使用浏览器全局变量时加上 window 前辍</strong></li><li>10.0 <strong>注释的双斜杠后面必须加一个空格</strong></li><li>11.0 行未千万不加空格</li><li>12.0 每个文件结束之后必须添加一个新的换行</li><li>13.0 空行不能同时存在多个</li><li>14.0 <strong>不修改的变量不能使用 let 定义</strong></li><li>15.0 <strong>变量名不能用 _  （仅在data中检查）</strong></li></ul><h4 id="1-3-2-格式化插件"><a href="#1-3-2-格式化插件" class="headerlink" title="1.3.2 格式化插件"></a>1.3.2 格式化插件</h4><pre><code class="hljs ebnf"><span class="hljs-attribute">Prettier-Standard - JavaScript formatter</span></code></pre><h4 id="1-3-3-注意点"><a href="#1-3-3-注意点" class="headerlink" title="1.3.3 注意点"></a>1.3.3 注意点</h4><ul><li>如果错误过多，该指令可以一次性将错误基本修复<ul><li>只修改语法错误，不修改代码<pre><code class="hljs applescript">npm <span class="hljs-built_in">run</span> lint <span class="hljs-comment">--fix</span></code></pre></li></ul></li></ul><h3 id="1-4-纯净化项目结构"><a href="#1-4-纯净化项目结构" class="headerlink" title="1.4 纯净化项目结构"></a>1.4 纯净化项目结构</h3><h4 id="1-4-1-删除不需要的"><a href="#1-4-1-删除不需要的" class="headerlink" title="1.4.1 删除不需要的"></a>1.4.1 删除不需要的</h4><ul><li>将 <code>compoents</code> 下面的所有内容全部删除</li><li>将 <code>views</code> 下面的所有内容删除</li><li>将 <code>App.vue</code> 中的内容全部清除，只留下一个 <code>&lt;router-view&gt;&lt;/router-view&gt;</code></li><li>将 <code>router.js</code> 中导入的路由文件删除，清空路由信息</li></ul><h4 id="1-4-2-添加文件夹"><a href="#1-4-2-添加文件夹" class="headerlink" title="1.4.2 添加文件夹"></a>1.4.2 添加文件夹</h4><ul><li><code>api</code>：管理所有的网络请求</li><li><code>style</code>：管理所有的样式</li><li><code>utils</code>：管理所有的自己定义工具类</li><li>assets：管理所有的静态资源</li><li>components：管理全局的组件</li><li>views：管理当前项目中的页面组件</li></ul><h2 id="2-导入组件"><a href="#2-导入组件" class="headerlink" title="2.导入组件"></a>2.导入组件</h2><ul><li><p>vant ：<code>npm i vant -S </code></p></li><li><p>导入组件（导入所有组件的方式）</p><pre><code class="hljs js"><span class="hljs-keyword">import</span> Vant <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vant&#x27;</span><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;vant/lib/index.css&#x27;</span><span class="hljs-comment">// 使用 vant</span>Vue.use(Vant)</code></pre></li></ul><h2 id="3-页面适配"><a href="#3-页面适配" class="headerlink" title="3.页面适配"></a>3.页面适配</h2><h3 id="3-1-flexible"><a href="#3-1-flexible" class="headerlink" title="3.1 flexible"></a>3.1 flexible</h3><blockquote><p>可以自动给页面中的 html 标签设置字体大小，以此设置 rem 的基本值</p></blockquote><p>步骤：</p><ul><li><p>1.0 安装 <code>lib-flexible</code></p><pre><code class="hljs bash">npm i -S amfe-flexible</code></pre></li><li><p>2.0 在 <code>main.js</code> 中引入 <code>lib-flexible</code></p><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;amfe-flexible&#x27;</span></code></pre></li></ul><ul><li>元素px  除以（设计稿尺寸/10）<ul><li>单位 rem</li></ul></li></ul><h3 id="3-2-postcss-pxtorem"><a href="#3-2-postcss-pxtorem" class="headerlink" title="3.2 postcss-pxtorem"></a>3.2 postcss-pxtorem</h3><blockquote><p>设计稿中的测量出来的长度都是 px, 无法自动适应设备，如果自己手写 px 转换 rem 太麻烦了，可以使用<code>postcss-pxtorem</code>来自动设置</p><p>文档地址：<a href="https://github.com/cuth/postcss-pxtorem">https://github.com/cuth/postcss-pxtorem</a></p></blockquote><p>步骤：</p><ul><li>1.0 下载 postcss-pxtorem</li></ul><pre><code class="hljs javascript">npm install postcss-pxtorem --save-dev</code></pre><ul><li>2.0 使用插件</li></ul><pre><code class="hljs javascript"><span class="hljs-comment">// 项目根目录中创建了`vue.config.js`</span><span class="hljs-comment">// 导包</span><span class="hljs-keyword">const</span> autoprefixer = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;autoprefixer&#x27;</span>)<span class="hljs-comment">// 导包</span><span class="hljs-keyword">const</span> pxtorem = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;postcss-pxtorem&#x27;</span>)<span class="hljs-comment">// 暴露出去</span><span class="hljs-built_in">module</span>.exports = &#123;  <span class="hljs-comment">// css属性如何处理</span>  css: &#123;    <span class="hljs-comment">// 处理的选项</span>    loaderOptions: &#123;      postcss: &#123;        plugins: [          autoprefixer(),          <span class="hljs-comment">// 使用 pxtorem库进行转换</span>          pxtorem(&#123;            rootValue: <span class="hljs-number">37.5</span>,            propList: [<span class="hljs-string">&#x27;*&#x27;</span>]          &#125;)        ]      &#125;    &#125;  &#125;&#125;</code></pre><h3 id="3-3全局的less处理"><a href="#3-3全局的less处理" class="headerlink" title="3.3全局的less处理"></a>3.3全局的less处理</h3><blockquote><p>有了设计规范之后，我们就可以根据规范中的内容抽取<code>less</code>全局变量啦,把颜色抽取一波,同时配合自动化导入让代码中可以使用</p></blockquote><p><a href="https://cli.vuejs.org/zh/guide/css.html#%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8">预处理器</a></p><p><a href="https://cli.vuejs.org/zh/guide/css.html#%E8%87%AA%E5%8A%A8%E5%8C%96%E5%AF%BC%E5%85%A5">自动化导入</a></p><p><a href="https://www.npmjs.com/package/vue-cli-plugin-style-resources-loader">style-resources-loader</a></p><h4 id="3-3-1-定义全局文件"><a href="#3-3-1-定义全局文件" class="headerlink" title="3.3.1 定义全局文件"></a>3.3.1 定义全局文件</h4><p>在    src    的    style    目录下创建    xxx.less</p><h4 id="3-3-2-装包"><a href="#3-3-2-装包" class="headerlink" title="3.3.2 装包"></a>3.3.2 装包</h4><pre><code class="hljs javascript">vue add style-resources-loader</code></pre><ul><li>如果报错 输入命令   set-ExecutionPolicy RemoteSigned </li></ul><h4 id="3-3-3-配置"><a href="#3-3-3-配置" class="headerlink" title="3.3.3 配置"></a>3.3.3 配置</h4><p>写配置文件<code>vue.config.js</code></p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<span class="hljs-built_in">module</span>.exports = &#123;  <span class="hljs-comment">// 插件配置</span>  pluginOptions: &#123;    <span class="hljs-comment">// style-resources-loader配置</span>    <span class="hljs-string">&#x27;style-resources-loader&#x27;</span>: &#123;      <span class="hljs-comment">// 预处理程序选择 less</span>      preProcessor: <span class="hljs-string">&#x27;less&#x27;</span>,      <span class="hljs-comment">// 参数</span>      patterns: [        <span class="hljs-comment">// 项目根路径下 /src/styles/ 的所有less文件</span>        <span class="hljs-comment">// 指定某一个的话可以具体设置为某一个less文件</span>        path.resolve(__dirname, <span class="hljs-string">&#x27;./src/style/*.less&#x27;</span>)      ]    &#125;  &#125;&#125;</code></pre><h4 id="3-3-4-less可变插值"><a href="#3-3-4-less可变插值" class="headerlink" title="3.3.4 less可变插值"></a>3.3.4 less可变插值</h4><pre><code class="hljs css">&lt;style lang=&quot;less&quot;&gt;    <span class="hljs-selector-class">.widthset</span>(<span class="hljs-keyword">@key</span>,<span class="hljs-keyword">@w</span>) &#123;      @&#123;<span class="hljs-selector-tag">key</span>&#125;: 1<span class="hljs-selector-tag">rem</span> * <span class="hljs-keyword">@w</span> / <span class="hljs-number">75</span>;    &#125;    <span class="hljs-selector-class">.bg</span> &#123;      .widthset(width, 750);      <span class="hljs-selector-class">.widthset</span>(<span class="hljs-selector-tag">height</span>, 80);      <span class="hljs-selector-tag">background-color</span>: <span class="hljs-selector-tag">pink</span>;    &#125;&lt;/style&gt;</code></pre><h3 id="4-normalize-css"><a href="#4-normalize-css" class="headerlink" title="4. normalize.css"></a>4. normalize.css</h3><blockquote><p>很多现代化浏览器会为元素标签添加一些独有的默认样式，这会带来一定的显示差异，我们可以自己写<code>css</code>去覆盖，但是有个写好的样式库可以直接使用，他就是<code>normalize.css</code></p><p>文档地址：<a href="http://necolas.github.io/normalize.css/">http://necolas.github.io/normalize.css/</a></p></blockquote><ul><li><p>1.0 下载 normalize.css</p><pre><code class="hljs bash">npm install normalize.css</code></pre></li><li><p>2.0 导入第三方包</p><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;normalize.css&#x27;</span></code></pre></li></ul><h3 id="5-配置地址环境变量"><a href="#5-配置地址环境变量" class="headerlink" title="5. 配置地址环境变量"></a>5. 配置地址环境变量</h3><p>在根目录下创建</p><pre><code class="hljs routeros">.env.development    写入 <span class="hljs-attribute">VUE_APP_XX</span>=测试地址.env.production    写入 <span class="hljs-attribute">VUE_APP_XX</span>=生产地址</code></pre><p>重启项目，打印一下是否成功</p><pre><code class="hljs mel">created () &#123;    <span class="hljs-keyword">window</span>.console.<span class="hljs-keyword">log</span>(process.<span class="hljs-keyword">env</span>.VUE_APP_URL)&#125;,</code></pre><h3 id="6-axios，配置基地址"><a href="#6-axios，配置基地址" class="headerlink" title="6.axios，配置基地址"></a>6.axios，配置基地址</h3><p>在 api 文件夹下 创建 requset.js</p><pre><code class="hljs javascript"><span class="hljs-comment">//导入axios</span><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><span class="hljs-comment">//创建副本</span><span class="hljs-keyword">const</span> _fetch = axios.create(&#123;  baseURL: process.env.VUE_APP_URL&#125;)<span class="hljs-comment">//请求拦截</span>_fetch.interceptors.request.use(  config =&gt; &#123;    <span class="hljs-keyword">return</span> config  &#125;,  error =&gt; &#123;    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(error)  &#125;)<span class="hljs-comment">//响应拦截</span>_fetch.interceptors.response.use(  res =&gt; &#123;    <span class="hljs-keyword">return</span> res  &#125;,  error =&gt; &#123;    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(error)  &#125;)<span class="hljs-comment">//暴露方法</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> _fetch</code></pre><h2 id="3-起步"><a href="#3-起步" class="headerlink" title="3.起步"></a>3.起步</h2><h3 id="3-1-登录页面"><a href="#3-1-登录页面" class="headerlink" title="3.1 登录页面"></a>3.1 登录页面</h3><h4 id="3-1-1-创建-login-页"><a href="#3-1-1-创建-login-页" class="headerlink" title="3.1.1 创建 login 页"></a>3.1.1 创建 login 页</h4><pre><code class="hljs css">在 <span class="hljs-selector-tag">views</span> 下创建 <span class="hljs-selector-tag">login</span><span class="hljs-selector-class">.vue</span>，初始化组件</code></pre><h4 id="3-1-2-配置路由"><a href="#3-1-2-配置路由" class="headerlink" title="3.1.2 配置路由"></a>3.1.2 配置路由</h4><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> routes = [  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/login&#x27;</span> &#125;,  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/login&#x27;</span>, <span class="hljs-attr">component</span>: login &#125;]</code></pre><h4 id="3-1-3-设置路由出口"><a href="#3-1-3-设置路由出口" class="headerlink" title="3.1.3 设置路由出口"></a>3.1.3 设置路由出口</h4><p>在 App.vue 中</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></code></pre><h4 id="3-1-4-配置base-css"><a href="#3-1-4-配置base-css" class="headerlink" title="3.1.4 配置base.css"></a>3.1.4 配置base.css</h4><p>在 main 中 引入</p><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;@/style/base.css&#x27;</span></code></pre><h4 id="3-1-5-配置全局less"><a href="#3-1-5-配置全局less" class="headerlink" title="3.1.5 配置全局less"></a>3.1.5 配置全局less</h4><pre><code class="hljs less"><span class="hljs-comment">//公共边距</span><span class="hljs-variable">@p15:</span> <span class="hljs-number">15px</span>;</code></pre><h4 id="3-1-6-布局"><a href="#3-1-6-布局" class="headerlink" title="3.1.6 布局"></a>3.1.6 布局</h4><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;login&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 导航栏 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">van-nav-bar</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">left</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;iconfont f44&quot;</span>&gt;</span><span class="hljs-symbol">&amp;#xe637;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">van-nav-bar</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 内容 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>      <span class="hljs-comment">&lt;!-- 文字 --&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>您好，请登录<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>      <span class="hljs-comment">&lt;!-- 表单 --&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">van-form</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 输入框 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">van-field</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入手机号&quot;</span>&gt;</span>          <span class="hljs-comment">&lt;!-- 插槽,左侧图标 --&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">left-icon</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;iconfont p41&quot;</span>&gt;</span><span class="hljs-symbol">&amp;#xe60b;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>          <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">van-field</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 输入框 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">van-field</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入验证码&quot;</span>&gt;</span>          <span class="hljs-comment">&lt;!-- 插槽,左侧图标 --&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">left-icon</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;iconfont p41&quot;</span>&gt;</span><span class="hljs-symbol">&amp;#xe60b;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>          <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>          <span class="hljs-comment">&lt;!-- 插槽,右侧按钮 --&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">button</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;code&quot;</span>&gt;</span>获取验证码<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>          <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">van-field</span>&gt;</span>      <span class="hljs-tag">&lt;/<span class="hljs-name">van-form</span>&gt;</span>      <span class="hljs-comment">&lt;!-- 协议 --&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tip&quot;</span>&gt;</span>        登录即同意        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tip-color&quot;</span>&gt;</span>《用户使用协议 <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>        和        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tip-color&quot;</span>&gt;</span>《隐私协议》<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>      <span class="hljs-comment">&lt;!-- 确定按钮 --&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">van-button</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;#E40137&quot;</span> <span class="hljs-attr">round</span> <span class="hljs-attr">block</span>&gt;</span>确定<span class="hljs-tag">&lt;/<span class="hljs-name">van-button</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span>  data () &#123;<span class="javascript">    <span class="hljs-keyword">return</span> &#123;&#125;</span>  &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;less&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css"><span class="hljs-selector-class">.login</span> &#123;</span><span class="css">  <span class="hljs-selector-class">.content</span> &#123;</span><span class="css">    <span class="hljs-selector-tag">padding</span>: 0 <span class="hljs-keyword">@p15</span>;</span><span class="css">    <span class="hljs-selector-class">.title</span> &#123;</span>      font-size: 18px;      font-family: PingFangSC, PingFangSC-Semibold;      font-weight: 600;      text-align: left;<span class="css">      <span class="hljs-selector-tag">color</span>: <span class="hljs-selector-id">#222222</span>;</span>      line-height: 25px;      letter-spacing: 0px;      margin: 50px 0 65px;    &#125;<span class="css">    <span class="hljs-selector-class">.p41</span> &#123;</span>      margin-right: 20px;    &#125;<span class="css">    <span class="hljs-selector-class">.code</span> &#123;</span>      font-size: 16px;      font-family: PingFangSC, PingFangSC-Regular;      font-weight: 400;      text-align: left;<span class="css">      <span class="hljs-selector-tag">color</span>: <span class="hljs-selector-id">#00b8d4</span>;</span><span class="css">      <span class="hljs-selector-tag">line-height</span>: 22<span class="hljs-selector-class">.5px</span>;</span>      letter-spacing: 0px;    &#125;<span class="css">    <span class="hljs-selector-class">.tip</span> &#123;</span>      margin-top: 26px;      margin-bottom: 44px;      font-size: 12px;      font-family: PingFangSC, PingFangSC-Regular;      font-weight: 400;      text-align: left;<span class="css">      <span class="hljs-selector-tag">color</span>: <span class="hljs-selector-id">#181a39</span>;</span><span class="css">      <span class="hljs-selector-tag">line-height</span>: 16<span class="hljs-selector-class">.5px</span>;</span>      letter-spacing: 0px;<span class="css">      <span class="hljs-selector-class">.tip-color</span> &#123;</span><span class="css">        <span class="hljs-selector-tag">color</span>: <span class="hljs-selector-id">#00b8d4</span>;</span>      &#125;    &#125;  &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><h4 id="3-1-7表单验证"><a href="#3-1-7表单验证" class="headerlink" title="3.1.7表单验证"></a>3.1.7表单验证</h4><p>示范</p><pre><code class="hljs javascript">&lt;van-form ref=<span class="hljs-string">&quot;form&quot;</span>&gt;&lt;van-field  v-model=<span class="hljs-string">&quot;form.mobile&quot;</span>  :rules=<span class="hljs-string">&quot;rules.mobile&quot;</span>  name=<span class="hljs-string">&quot;mobile&quot;</span>&gt;&lt;srcipt&gt;    form: &#123;        mobile: <span class="hljs-string">&#x27;&#x27;</span>,      &#125;,    rules: &#123;        mobile: [          &#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;用户名不能为空&#x27;</span>, <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;onChange&#x27;</span> &#125;,          <span class="hljs-comment">//自定义表单验证</span>          &#123; <span class="hljs-attr">validator</span>: <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;              <span class="hljs-keyword">const</span> _reg = <span class="hljs-regexp">/xxx/</span>              <span class="hljs-keyword">return</span> _reg.test(value)            &#125;,<span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入正确的手机号&#x27;</span>,<span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;onChange&#x27;</span>          &#125;        ],      &#125;&lt;/srcipt&gt;</code></pre><h4 id="3-1-8-获取验证码"><a href="#3-1-8-获取验证码" class="headerlink" title="3.1.8 获取验证码"></a>3.1.8 获取验证码</h4><p>在 api 文件夹下创建 login.js</p><pre><code class="hljs javascript"><span class="hljs-comment">//导入拦截器</span><span class="hljs-keyword">import</span> _fetch <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./requset&#x27;</span><span class="hljs-comment">//配置方法</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getCode</span> (<span class="hljs-params">data</span>) </span>&#123;  <span class="hljs-keyword">return</span> _fetch(&#123;    url: <span class="hljs-string">&#x27;/au/code&#x27;</span>,    method: <span class="hljs-string">&#x27;post&#x27;</span>,    data  &#125;)&#125;<span class="hljs-comment">//暴露方法</span><span class="hljs-keyword">export</span> &#123; getCode &#125;</code></pre><p>在 login.vue 中</p><pre><code class="hljs javascript"><span class="hljs-comment">//引入方法</span><span class="hljs-keyword">import</span> &#123; getCode &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/api/login.js&#x27;</span><span class="hljs-comment">//局部表单验证通过后</span>getCode(&#123;    mobile: <span class="hljs-built_in">this</span>.form.mobile&#125;).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;    <span class="hljs-built_in">this</span>.$toast.success(res.data.data)&#125;)</code></pre><h4 id="3-1-9-设置倒计时"><a href="#3-1-9-设置倒计时" class="headerlink" title="3.1.9 设置倒计时"></a>3.1.9 设置倒计时</h4><p>在验证码局部表单验证成功后</p><pre><code class="hljs javascript">data()&#123;    codeTime:<span class="hljs-number">6</span>,&#125;<span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.codeTime === <span class="hljs-number">6</span>) &#123;    <span class="hljs-built_in">this</span>.codeTime--    <span class="hljs-keyword">const</span> _time = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;      <span class="hljs-built_in">this</span>.codeTime--      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.codeTime &lt;= <span class="hljs-number">0</span>) &#123;        <span class="hljs-built_in">this</span>.codeTime = <span class="hljs-number">6</span>        <span class="hljs-built_in">clearInterval</span>(_time)      &#125;    &#125;, <span class="hljs-number">1000</span>)&#125;</code></pre><p>html配置</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">button</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;code&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;getCode&quot;</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;codeTime === 6&quot;</span>&gt;</span>      获取验证码    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;code code2&quot;</span> <span class="hljs-attr">disabled</span> <span class="hljs-attr">v-else</span>&gt;</span>&#123;&#123; codeTime &#125;&#125;后重试<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></code></pre><h4 id="3-2-0-登录成功"><a href="#3-2-0-登录成功" class="headerlink" title="3.2.0 登录成功"></a>3.2.0 登录成功</h4><p>调用登录接口，在 api 文件夹下的 login.js 中定义方法</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">auLogin</span> (<span class="hljs-params">data</span>) </span>&#123;  <span class="hljs-keyword">return</span> _fetch(&#123;    url: <span class="hljs-string">&#x27;/au/login&#x27;</span>,    method: <span class="hljs-string">&#x27;post&#x27;</span>,    data  &#125;)&#125;</code></pre><p>引入方法</p><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; getCode, auLogin &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/api/login.js&#x27;</span></code></pre><p>表单验证成功后调用方法</p><pre><code class="hljs javascript">auLogin(<span class="hljs-built_in">this</span>.form).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;    <span class="hljs-built_in">window</span>.console.log(res)    saveLocal(res.data.data.jwt)&#125;)</code></pre><h4 id="3-2-1-vuex保存户信息"><a href="#3-2-1-vuex保存户信息" class="headerlink" title="3.2.1 vuex保存户信息"></a>3.2.1 vuex保存户信息</h4><p>在 store 文件夹下的 index.js 中配置变量</p><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> Vuex.Store(&#123;  state: &#123;    userInfo: <span class="hljs-string">&#x27;&#x27;</span>  &#125;,  mutations: &#123;    setUserInfo (state, value) &#123;      state.userInfo = value    &#125;  &#125;,  actions: &#123;&#125;,  modules: &#123;&#125;&#125;)</code></pre><p>使用 vue 的 <strong>mutations</strong> 保存登录成功后返回的信息</p><blockquote><p><strong>this.$store.commit( ‘ 方法名 ‘ , 参数)</strong></p></blockquote><pre><code class="hljs javascript">auLogin(<span class="hljs-built_in">this</span>.form).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;    <span class="hljs-built_in">window</span>.console.log(res)    <span class="hljs-comment">//保存用户信息</span>    <span class="hljs-built_in">this</span>.$store.commit(<span class="hljs-string">&#x27;setUserInfo&#x27;</span>, res.data.data.user)&#125;)</code></pre><h4 id="3-2-2-保存token"><a href="#3-2-2-保存token" class="headerlink" title="3.2.2 保存token"></a>3.2.2 保存token</h4><p>在 utils 文件夹下 自定义处理 localStorage 的方法</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getLocal</span> (<span class="hljs-params">key = <span class="hljs-string">&#x27;token&#x27;</span></span>) </span>&#123;  <span class="hljs-keyword">return</span> <span class="hljs-built_in">window</span>.localStorage.getItem(key)&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">saveLocal</span> (<span class="hljs-params">value, key = <span class="hljs-string">&#x27;token&#x27;</span></span>) </span>&#123;  <span class="hljs-keyword">return</span> <span class="hljs-built_in">window</span>.localStorage.setItem(key, value)&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">removeLocal</span> (<span class="hljs-params">key = <span class="hljs-string">&#x27;token&#x27;</span></span>) </span>&#123;  <span class="hljs-keyword">return</span> <span class="hljs-built_in">window</span>.localStorage.removetItem(key)&#125;<span class="hljs-comment">//暴露方法</span><span class="hljs-keyword">export</span> &#123; getLocal, saveLocal, removeLocal &#125;</code></pre><p>在登录页，返回登录成功参数的地方调用方法</p><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; saveLocal &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/local.js&#x27;</span>auLogin(<span class="hljs-built_in">this</span>.form).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;    <span class="hljs-built_in">window</span>.console.log(res)    <span class="hljs-built_in">this</span>.$store.commit(<span class="hljs-string">&#x27;setUserInfo&#x27;</span>, res.data.data.user)    <span class="hljs-comment">//保存 token</span>    saveLocal(res.data.data.jwt)&#125;)</code></pre>]]></content>
    
    
    <categories>
      
      <category>练习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
