<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>jquery-01常用查询元素语法</title>
    <link href="/2020/08/10/jquery-01%E5%B8%B8%E7%94%A8%E6%9F%A5%E8%AF%A2%E5%85%83%E7%B4%A0%E8%AF%AD%E6%B3%95/"/>
    <url>/2020/08/10/jquery-01%E5%B8%B8%E7%94%A8%E6%9F%A5%E8%AF%A2%E5%85%83%E7%B4%A0%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p><code>空就是获取，输入值就是设置</code></p><h2 id="基本选择器-和css一样"><a href="#基本选择器-和css一样" class="headerlink" title="基本选择器(和css一样)"></a>基本选择器(和css一样)</h2><p>id选择器  :  $(‘#box’)</p><pre><code class="hljs javascript">$(<span class="hljs-string">&#x27;#id&#x27;</span>).css(<span class="hljs-string">&#x27;属性名&#x27;</span>,属性值);</code></pre><p>类选择器  :  $(‘.one’)</p><pre><code class="hljs javascript">$(<span class="hljs-string">&#x27;.类名&#x27;</span>).css(<span class="hljs-string">&#x27;属性名&#x27;</span>,属性值);</code></pre><p>标签选择器 ： $(‘li’)</p><pre><code class="hljs javascript">$(<span class="hljs-string">&#x27;标签名&#x27;</span>).css(<span class="hljs-string">&#x27;属性名&#x27;</span>,属性值);</code></pre><p>并集选择器 : $(‘li,p’)</p><p>交集选择器 :  $(‘li.one’)</p><h2 id="层次选择器"><a href="#层次选择器" class="headerlink" title="层次选择器"></a>层次选择器</h2><p>子代选择器： $(‘#box&gt;p’)</p><p>后代选择器:：$(‘#box p’)</p><h2 id="过滤选择器"><a href="#过滤选择器" class="headerlink" title="过滤选择器"></a>过滤选择器</h2><p>​    1.过滤选择器是jq独有的选择器</p><p>​    2.语法规则： $(‘选择器:过滤条件’)</p><blockquote><p>:eq(下标)  ： 选择具体下标的元素</p><p>:odd    : 选择下标为奇数的元素</p><p>:even    : 选择下标为偶数的元素</p></blockquote><pre><code class="hljs javascript">&lt;ul&gt;    &lt;li&gt;我是<span class="hljs-number">1</span>&lt;/li&gt;    &lt;li&gt;我是<span class="hljs-number">2</span>&lt;/li&gt;    &lt;li&gt;我是<span class="hljs-number">3</span>&lt;/li&gt;    &lt;li&gt;我是<span class="hljs-number">4</span>&lt;/li&gt;    &lt;li&gt;我是<span class="hljs-number">5</span>&lt;/li&gt;    &lt;li&gt;我是<span class="hljs-number">6</span>&lt;/li&gt;&lt;/ul&gt;&lt;!-- 导入jq --&gt;&lt;script src=<span class="hljs-string">&quot;./jquery-1.12.4.js&quot;</span>&gt;&lt;/script&gt;&lt;script&gt;    <span class="hljs-comment">// :odd        :  选择下标为奇数的元素  (双数行)</span>    $(<span class="hljs-string">&#x27;li:odd&#x27;</span>).css(<span class="hljs-string">&#x27;backgroundColor&#x27;</span>,<span class="hljs-string">&#x27;yellow&#x27;</span>);    <span class="hljs-comment">// :even       :  选择下标为偶数的元素  (单数行)</span>    $(<span class="hljs-string">&#x27;li:even&#x27;</span>).css(<span class="hljs-string">&#x27;backgroundColor&#x27;</span>,<span class="hljs-string">&#x27;pink&#x27;</span>);    <span class="hljs-comment">// :eq(下标)   ： 选择具体下标的元素</span>    <span class="hljs-keyword">let</span> index = <span class="hljs-number">5</span>;    <span class="hljs-comment">//a.第一种写法：直接把数字写在字符串里面</span>    $(<span class="hljs-string">&#x27;li:eq(0)&#x27;</span>).css(<span class="hljs-string">&#x27;backgroundColor&#x27;</span>,<span class="hljs-string">&#x27;green&#x27;</span>);    <span class="hljs-comment">//b.第二种写法：把数字写在外面   $().eq(下标)</span>    <span class="hljs-comment">//如果下标是存在变量中，就要使用这种写法</span>    $(<span class="hljs-string">&#x27;li&#x27;</span>).eq(index).css(<span class="hljs-string">&#x27;backgroundColor&#x27;</span>,<span class="hljs-string">&#x27;greenyellow&#x27;</span>);&lt;/script&gt;</code></pre><h2 id="css属性操作"><a href="#css属性操作" class="headerlink" title="css属性操作"></a>css属性操作</h2><ol><li><p>jq操作css样式属性  -&gt; 本质是调用方法</p><ul><li><p>获取： $().css(‘属性名’)</p></li><li><p>设置： $().css(‘属性名’,属性值)</p></li></ul></li></ol><blockquote><p><code> jq操作样式特点： 行内和行外都可以操作 （底层使用getComputedStyle）</code></p></blockquote><ol start="2"><li>jq设计思想：<ul><li>方法统一： 获取和设置方法名相同，参数不同作用不同</li><li>隐式迭代： jq会在底层偷偷遍历每一个元素，设置相同的值</li><li>隐式迭代只对设置有效</li><li><code>获取类操作没有隐式迭代：默认获取第一个元素值</code></li></ul></li></ol><p><strong>获取css属性操作：选中多个元素 ， 默认只会获取第一个元素的值</strong></p><p><strong>设置css属性操作：选中多个元素 ，jq会自动遍历每一个元素设置相同的值</strong></p><h2 id="jq注册事件"><a href="#jq注册事件" class="headerlink" title="jq注册事件"></a>jq注册事件</h2><p>$( ).事件类型( 事件处理 );</p><pre><code class="hljs javascript">&lt;button id=<span class="hljs-string">&quot;btn1&quot;</span>&gt;按钮&lt;/button&gt;$(<span class="hljs-string">&#x27;#btn1&#x27;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-comment">//选中多个元素 : 默认只会获取第一个元素的值</span>    <span class="hljs-built_in">console</span>.log( $(<span class="hljs-string">&#x27;li&#x27;</span>).css(<span class="hljs-string">&#x27;width&#x27;</span>));&#125;);</code></pre><h2 id="html属性操作"><a href="#html属性操作" class="headerlink" title="html属性操作"></a>html属性操作</h2><ol><li>操作内容</li></ol><p>​        文本： $().text()        底层innerText</p><p>​        内容： $().html()       底层innerHTML</p><ol start="2"><li>标准属性+自定义属性</li></ol><p>​        获取： $().attr(‘属性名’)</p><p>​        设置： $().attr(‘属性名’,属性值)</p><p>​        移除： $().removeAttr(‘属性名’)</p><h2 id="表单常用属性操作"><a href="#表单常用属性操作" class="headerlink" title="表单常用属性操作"></a>表单常用属性操作</h2><ol><li><p>文本： </p><ul><li>$().val()</li></ul></li><li><p>布尔类型属性: jq使用$().prop()方法统一操作</p><ul><li><p>获取： $().prop(‘checked’)</p></li><li><p>设置： $().prop(‘checked’,true)</p></li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>jQuery</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jquery入门</title>
    <link href="/2020/08/10/jquery-%E5%85%A5%E9%97%A8/"/>
    <url>/2020/08/10/jquery-%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<p>JQ入门</p><a id="more"></a><h2 id="jQuery入门"><a href="#jQuery入门" class="headerlink" title="jQuery入门"></a>jQuery入门</h2><p>1.xxx：兼容IE5678浏览器，不更新。</p><p>2.xxx：不兼容IE5678，不更新。</p><p>3.xxx：正在更新，不兼容IE5678，比前面版本多了一些语法。</p><p><code>国内使用最多的是jq的1.x版本，主要是为了兼容老版本浏览器</code></p><h2 id="jQuery框架的使用流程"><a href="#jQuery框架的使用流程" class="headerlink" title="jQuery框架的使用流程"></a>jQuery框架的使用流程</h2><ol><li>导包：得到一个全局函数</li><li>用包：$() 👉底层 document.querySelector()</li></ol><h2 id="jQuery入口函数两种写法"><a href="#jQuery入口函数两种写法" class="headerlink" title="jQuery入口函数两种写法"></a>jQuery入口函数两种写法</h2><ol><li>标准写法：$(document).ready( function(){} );</li><li>简洁写法：$( function(){} )</li></ol><h2 id="jQ入口函数和原生入口函数区别"><a href="#jQ入口函数和原生入口函数区别" class="headerlink" title="jQ入口函数和原生入口函数区别"></a>jQ入口函数和原生入口函数区别</h2><ol><li><p>数量不同：</p><ul><li>jq入口函数可以写多个</li><li>原生DOM入口函数只能写一个，如果多个后者覆盖前者</li></ul></li><li><p>时机不同：</p><ul><li>jq入口函数：DOM树加载完毕</li><li>原生DOM入口函数：DOM树+外部资源 都加载完毕</li></ul></li></ol><pre><code class="hljs javascript">&lt;!-- 选一个加载慢的图片地址，外网的最好 --&gt;&lt;img id=<span class="hljs-string">&quot;tu&quot;</span> src=<span class="hljs-string">&quot;https://w.wallhaven.cc/full/5w/wallhaven-5we787.jpg&quot;</span> alt=<span class="hljs-string">&quot;&quot;</span>&gt;&lt;!-- 引入jq --&gt;&lt;script src=<span class="hljs-string">&quot;./jquery-1.12.4.js&quot;</span>&gt;&lt;/script&gt;&lt;script&gt;    <span class="hljs-comment">//DOM原生入口函数</span>    <span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-keyword">let</span> a = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;tu&#x27;</span>);        <span class="hljs-built_in">console</span>.log(a.offsetWidth); <span class="hljs-comment">//打印img的宽</span>    &#125;    <span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;            <span class="hljs-keyword">let</span> a = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;tu&#x27;</span>);            <span class="hljs-built_in">console</span>.log(a.offsetHeight); <span class="hljs-comment">//打印img的高</span>        &#125;        <span class="hljs-comment">//jq入口函数</span>    $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-keyword">let</span> a = $(<span class="hljs-string">&#x27;#tu&#x27;</span>);        <span class="hljs-built_in">console</span>.log(a.width() + <span class="hljs-string">&#x27;我是jq宽&#x27;</span>); <span class="hljs-comment">//打印img的宽</span>    &#125;);    $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-keyword">let</span> a = $(<span class="hljs-string">&#x27;#tu&#x27;</span>);        <span class="hljs-built_in">console</span>.log(a.height() + <span class="hljs-string">&#x27;我是jq高&#x27;</span>); <span class="hljs-comment">//打印img的高</span>    &#125;);&lt;/script&gt;</code></pre><h2 id="jQ对象与DIM对象的区别"><a href="#jQ对象与DIM对象的区别" class="headerlink" title="jQ对象与DIM对象的区别"></a><code>jQ对象与DIM对象的区别</code></h2><ol><li>DOM对象：使用DOM原生语法获取的对象</li><li>jQ对象：使用jQ语法获取的对象，<code>本质上是一个伪数组</code></li></ol><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ol><li>不互通（因为原型）<ul><li>jq对象只能用jq语法，不能使用DOM语法</li><li>DOM对象只能使用DOM语法，不能使用JQ语法</li></ul></li></ol><h3 id="jQ对象和DOM对象互转"><a href="#jQ对象和DOM对象互转" class="headerlink" title="jQ对象和DOM对象互转"></a>jQ对象和DOM对象互转</h3><ol><li><p>DOM转JQ</p><ul><li>$( DOM对象 )</li></ul></li><li><p>jQ转DOM</p><ul><li>$( )[下标]</li><li>$().get(下标)</li></ul></li></ol><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;box&quot;</span>&gt;我是div&lt;/div&gt;<span class="hljs-comment">//引入jq</span>&lt;script src=<span class="hljs-string">&quot;./jquery-1.12.4.js&quot;</span>&gt;&lt;/script&gt;&lt;script&gt;    <span class="hljs-comment">/*</span><span class="hljs-comment">    DOM-&gt;jq</span><span class="hljs-comment">    让DOM原生对象使用jq语法</span><span class="hljs-comment">    $(DOM对象)</span><span class="hljs-comment">    */</span>    <span class="hljs-keyword">let</span> d = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#box&#x27;</span>);    <span class="hljs-built_in">console</span>.log($(d));    $(d).css(<span class="hljs-string">&#x27;color&#x27;</span>, <span class="hljs-string">&#x27;red&#x27;</span>);    <span class="hljs-comment">/*</span><span class="hljs-comment">    jq-&gt;DOM</span><span class="hljs-comment">    让jq对象使用DOM原生语法</span><span class="hljs-comment">    1. $()[下标]</span><span class="hljs-comment">    2. $().get(下标)</span><span class="hljs-comment">    */</span>    <span class="hljs-built_in">console</span>.log($(box)[<span class="hljs-number">0</span>]);    <span class="hljs-built_in">console</span>.log($(box).get(<span class="hljs-number">0</span>));&lt;/script&gt;</code></pre><h2 id="是一个函数对象"><a href="#是一个函数对象" class="headerlink" title="$是一个函数对象"></a>$是一个函数对象</h2><ol><li>$与jQuery是完全等价的<ul><li>凡是使用$的地方，都可以完全替换成jQuery</li></ul></li></ol><blockquote><p><code>jq底层 ： $ = jQuery</code></p></blockquote><ol start="2"><li>$()函数参数不同，功能也不同<ul><li>参数是选择器：查询页面元素</li><li>参数是函数：入口函数</li><li>参数是dom对象：DOM对象 转成 jq对象</li></ul></li></ol><pre><code class="hljs javascript"><span class="hljs-comment">//jq底层 ： $ = jQuery</span><span class="hljs-built_in">console</span>.log( $ === jQuery );<span class="hljs-comment">//true</span><span class="hljs-comment">//(1)参数是选择器 ： 查询页面元素</span><span class="hljs-built_in">console</span>.log(  $(<span class="hljs-string">&#x27;#box&#x27;</span>) );<span class="hljs-comment">//(2)参数是函数 ： 入口函数</span>$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;111&#x27;</span>);&#125;);jQuery(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;222&#x27;</span>);&#125;);<span class="hljs-comment">//(3)参数是DOM对象 ： 将DOM对象 转为 jq对象</span><span class="hljs-keyword">let</span> box = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#box&#x27;</span>);<span class="hljs-built_in">console</span>.log(box);<span class="hljs-built_in">console</span>.log(  $(box) );</code></pre>]]></content>
    
    
    <categories>
      
      <category>jQuery</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>递归</title>
    <link href="/2020/08/07/%E9%80%92%E5%BD%92/"/>
    <url>/2020/08/07/%E9%80%92%E5%BD%92/</url>
    
    <content type="html"><![CDATA[<h2 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h2><p><code>递归函数</code>：一个函数在函数体中调用自己</p><p><code>递归函数的作用</code>：函数体代码的重复执行，<code>递归函数做的事和循环是一样的</code>，能用递归做的就可以用循环做，只是语法简洁性不同。</p><p><code>递归注意点</code>：一定要有结束条件，否则会导致死循环</p><h2 id="单函数递归"><a href="#单函数递归" class="headerlink" title="单函数递归"></a>单函数递归</h2><pre><code class="hljs javascript">&lt;script&gt;    <span class="hljs-comment">//死循环</span>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;     <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;开心的&#x27;</span>);     fn();    &#125;;&lt;/script&gt;</code></pre><h2 id="双函数递归"><a href="#双函数递归" class="headerlink" title="双函数递归"></a>双函数递归</h2><pre><code class="hljs javascript">&lt;script&gt;    <span class="hljs-comment">//死循环</span>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn1</span>(<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;开心的&#x27;</span>);        fn2();    &#125;;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn2</span>(<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;不开心的&#x27;</span>);        fn1();    &#125;;    fn1();&lt;/script&gt;</code></pre><h2 id="递归实例"><a href="#递归实例" class="headerlink" title="递归实例"></a>递归实例</h2><pre><code class="hljs javascript">&lt;script&gt;    <span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;    <span class="hljs-comment">//函数在函数体中调用自己</span>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun</span>(<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;打印&#x27;</span>);        i++;        <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">3</span>) &#123;            fun();        &#125;    &#125;    fun();&lt;/script&gt;</code></pre><h2 id="递归实例进阶版1-求1-n的累加和"><a href="#递归实例进阶版1-求1-n的累加和" class="headerlink" title="递归实例进阶版1,求1-n的累加和"></a>递归实例进阶版1,求1-n的累加和</h2><pre><code class="hljs javascript">&lt;script&gt;    <span class="hljs-comment">//求1-n的累加和,n是正向整数</span>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getSum</span>(<span class="hljs-params">n</span>) </span>&#123;    <span class="hljs-keyword">return</span> n == <span class="hljs-number">1</span> ? <span class="hljs-number">1</span> : n + getSum(n<span class="hljs-number">-1</span>);    <span class="hljs-comment">/*</span><span class="hljs-comment">       if (n == 1) &#123;</span><span class="hljs-comment">           return 1;</span><span class="hljs-comment">       &#125; else if (n == 2) &#123;</span><span class="hljs-comment">           return 2 + getSum(1);</span><span class="hljs-comment">       &#125; else if (n == 3) &#123;</span><span class="hljs-comment">           return 3 + getSum(2);</span><span class="hljs-comment">       &#125; else if( n == 4)&#123;</span><span class="hljs-comment">           return 4 + getSum(3)</span><span class="hljs-comment">       &#125;</span><span class="hljs-comment">       ………………</span><span class="hljs-comment">       else if(n == n)&#123;</span><span class="hljs-comment">           return n + getSum(n-1)</span><span class="hljs-comment">       &#125;;</span><span class="hljs-comment">    */</span>&#125;&lt;/script&gt;</code></pre><img src="https://cdn.jsdelivr.net/gh/wzxyy/cdn/dg.png" class="[01]"><h2 id="递归实例进阶版2，遍历body的所有后代元素"><a href="#递归实例进阶版2，遍历body的所有后代元素" class="headerlink" title="递归实例进阶版2，遍历body的所有后代元素"></a>递归实例进阶版2，遍历body的所有后代元素</h2><pre><code class="hljs javascript">&lt;div&gt;    &lt;p&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span>&lt;/p&gt;    &lt;p&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span>&lt;/p&gt;    &lt;p&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span>&lt;/p&gt;&lt;/div&gt;&lt;div&gt;    &lt;a href=<span class="hljs-string">&quot;#&quot;</span>&gt;&lt;/a&gt;&lt;/div&gt;&lt;script&gt;    <span class="hljs-comment">//遍历body内的所有元素</span>    <span class="hljs-keyword">let</span> d = <span class="hljs-built_in">document</span>.body;    <span class="hljs-keyword">let</span> arr = [];    <span class="hljs-built_in">console</span>.log(d.children);    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun</span>(<span class="hljs-params">ele</span>) </span>&#123;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; ele.children.length; i++) &#123;            arr.push(ele.children[i]);            <span class="hljs-comment">//类似于for循环的嵌套</span>            fun(ele.children[i]);        &#125;    &#125;    fun(d);    <span class="hljs-built_in">console</span>.log(arr);&lt;/script&gt;</code></pre>]]></content>
    
    
    <categories>
      
      <category>JS高级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
